{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "467477ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:01:38.740338Z",
     "iopub.status.busy": "2024-08-26T16:01:38.740037Z",
     "iopub.status.idle": "2024-08-26T16:01:38.744545Z",
     "shell.execute_reply": "2024-08-26T16:01:38.743717Z"
    },
    "papermill": {
     "duration": 0.016421,
     "end_time": "2024-08-26T16:01:38.746558",
     "exception": false,
     "start_time": "2024-08-26T16:01:38.730137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# TODO:\n",
    "# - Handle emojis\n",
    "# - Handle special characters (display '&' instead of \"&amp;\")\n",
    "# - Remove HTML tags (like \"<br>\")\n",
    "# - Remove duplicates in text\n",
    "# - Remove empty/NaN/null values\n",
    "# - Translate text to english"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3683d926",
   "metadata": {
    "papermill": {
     "duration": 0.00774,
     "end_time": "2024-08-26T16:01:38.762505",
     "exception": false,
     "start_time": "2024-08-26T16:01:38.754765",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Finance News Sentiments Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4081c340",
   "metadata": {
    "papermill": {
     "duration": 0.007753,
     "end_time": "2024-08-26T16:01:38.778172",
     "exception": false,
     "start_time": "2024-08-26T16:01:38.770419",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Requirements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fb360674",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:01:38.795035Z",
     "iopub.status.busy": "2024-08-26T16:01:38.794777Z",
     "iopub.status.idle": "2024-08-26T16:03:11.968573Z",
     "shell.execute_reply": "2024-08-26T16:03:11.967371Z"
    },
    "papermill": {
     "duration": 93.185014,
     "end_time": "2024-08-26T16:03:11.971102",
     "exception": false,
     "start_time": "2024-08-26T16:01:38.786088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "\r\n",
      "\r\n",
      "The following additional packages will be installed:\r\n",
      "  libgail-common libgail18 libgtk2.0-0 libgtk2.0-bin libgtk2.0-common\r\n",
      "  libice-dev libpthread-stubs0-dev librsvg2-common libsm-dev libx11-dev\r\n",
      "  libxau-dev libxcb1-dev libxdmcp-dev libxt-dev openjdk-8-jdk-headless\r\n",
      "  openjdk-8-jre openjdk-8-jre-headless x11proto-dev xorg-sgml-doctools\r\n",
      "  xtrans-dev\r\n",
      "Suggested packages:\r\n",
      "  gvfs libice-doc libsm-doc libx11-doc libxcb-doc libxt-doc openjdk-8-demo\r\n",
      "  openjdk-8-source visualvm libnss-mdns fonts-nanum fonts-ipafont-gothic\r\n",
      "  fonts-ipafont-mincho fonts-wqy-microhei fonts-wqy-zenhei fonts-indic\r\n",
      "The following NEW packages will be installed:\r\n",
      "  libgail-common libgail18 libgtk2.0-0 libgtk2.0-bin libgtk2.0-common\r\n",
      "  libice-dev libpthread-stubs0-dev librsvg2-common libsm-dev libx11-dev\r\n",
      "  libxau-dev libxcb1-dev libxdmcp-dev libxt-dev openjdk-8-jdk\r\n",
      "  openjdk-8-jdk-headless openjdk-8-jre openjdk-8-jre-headless x11proto-dev\r\n",
      "  xorg-sgml-doctools xtrans-dev\r\n",
      "0 upgraded, 21 newly installed, 0 to remove and 39 not upgraded.\r\n",
      "Need to get 48.1 MB of archives.\r\n",
      "After this operation, 163 MB of additional disk space will be used.\r\n",
      "Get:1 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgtk2.0-common all 2.24.33-2ubuntu2.1 [125 kB]\r\n",
      "Get:2 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgtk2.0-0 amd64 2.24.33-2ubuntu2.1 [2038 kB]\r\n",
      "Get:3 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgail18 amd64 2.24.33-2ubuntu2.1 [15.9 kB]\r\n",
      "Get:4 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgail-common amd64 2.24.33-2ubuntu2.1 [132 kB]\r\n",
      "Get:5 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgtk2.0-bin amd64 2.24.33-2ubuntu2.1 [7936 B]\r\n",
      "Get:6 http://archive.ubuntu.com/ubuntu jammy/main amd64 xorg-sgml-doctools all 1:1.11-1.1 [10.9 kB]\r\n",
      "Get:7 http://archive.ubuntu.com/ubuntu jammy/main amd64 x11proto-dev all 2021.5-1 [604 kB]\r\n",
      "Get:8 http://archive.ubuntu.com/ubuntu jammy/main amd64 libice-dev amd64 2:1.0.10-1build2 [51.4 kB]\r\n",
      "Get:9 http://archive.ubuntu.com/ubuntu jammy/main amd64 libpthread-stubs0-dev amd64 0.4-1build2 [5516 B]\r\n",
      "Get:10 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 librsvg2-common amd64 2.52.5+dfsg-3ubuntu0.2 [17.7 kB]\r\n",
      "Get:11 http://archive.ubuntu.com/ubuntu jammy/main amd64 libsm-dev amd64 2:1.2.3-1build2 [18.1 kB]\r\n",
      "Get:12 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxau-dev amd64 1:1.0.9-1build5 [9724 B]\r\n",
      "Get:13 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxdmcp-dev amd64 1:1.1.3-0ubuntu5 [26.5 kB]\r\n",
      "Get:14 http://archive.ubuntu.com/ubuntu jammy/main amd64 xtrans-dev all 1.4.0-1 [68.9 kB]\r\n",
      "Get:15 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxcb1-dev amd64 1.14-3ubuntu3 [86.5 kB]\r\n",
      "Get:16 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 libx11-dev amd64 2:1.7.5-1ubuntu0.3 [744 kB]\r\n",
      "Get:17 http://archive.ubuntu.com/ubuntu jammy/main amd64 libxt-dev amd64 1:1.2.1-1 [396 kB]\r\n",
      "Get:18 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 openjdk-8-jre-headless amd64 8u422-b05-1~22.04 [30.8 MB]\r\n",
      "Get:19 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 openjdk-8-jre amd64 8u422-b05-1~22.04 [75.5 kB]\r\n",
      "Get:20 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 openjdk-8-jdk-headless amd64 8u422-b05-1~22.04 [8843 kB]\r\n",
      "Get:21 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 openjdk-8-jdk amd64 8u422-b05-1~22.04 [4012 kB]\r\n",
      "Fetched 48.1 MB in 2s (25.9 MB/s)\r\n",
      "\n",
      "\u001b7\u001b[0;23r\u001b8\u001b[1ASelecting previously unselected package libgtk2.0-common.\r\n",
      "(Reading database ... 123110 files and directories currently installed.)\r\n",
      "Preparing to unpack .../00-libgtk2.0-common_2.24.33-2ubuntu2.1_all.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [  0%]\u001b[49m\u001b[39m [..........................................................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [  1%]\u001b[49m\u001b[39m [..........................................................] \u001b8Unpacking libgtk2.0-common (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [  2%]\u001b[49m\u001b[39m [#.........................................................] \u001b8Selecting previously unselected package libgtk2.0-0:amd64.\r\n",
      "Preparing to unpack .../01-libgtk2.0-0_2.24.33-2ubuntu2.1_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [  4%]\u001b[49m\u001b[39m [##........................................................] \u001b8Unpacking libgtk2.0-0:amd64 (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [  5%]\u001b[49m\u001b[39m [##........................................................] \u001b8Selecting previously unselected package libgail18:amd64.\r\n",
      "Preparing to unpack .../02-libgail18_2.24.33-2ubuntu2.1_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [  6%]\u001b[49m\u001b[39m [###.......................................................] \u001b8Unpacking libgail18:amd64 (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [  7%]\u001b[49m\u001b[39m [####......................................................] \u001b8Selecting previously unselected package libgail-common:amd64.\r\n",
      "Preparing to unpack .../03-libgail-common_2.24.33-2ubuntu2.1_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [  8%]\u001b[49m\u001b[39m [####......................................................] \u001b8Unpacking libgail-common:amd64 (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [  9%]\u001b[49m\u001b[39m [#####.....................................................] \u001b8Selecting previously unselected package libgtk2.0-bin.\r\n",
      "Preparing to unpack .../04-libgtk2.0-bin_2.24.33-2ubuntu2.1_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 11%]\u001b[49m\u001b[39m [######....................................................] \u001b8Unpacking libgtk2.0-bin (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 12%]\u001b[49m\u001b[39m [######....................................................] \u001b8Selecting previously unselected package xorg-sgml-doctools.\r\n",
      "Preparing to unpack .../05-xorg-sgml-doctools_1%3a1.11-1.1_all.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 13%]\u001b[49m\u001b[39m [#######...................................................] \u001b8Unpacking xorg-sgml-doctools (1:1.11-1.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 14%]\u001b[49m\u001b[39m [########..................................................] \u001b8Selecting previously unselected package x11proto-dev.\r\n",
      "Preparing to unpack .../06-x11proto-dev_2021.5-1_all.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 15%]\u001b[49m\u001b[39m [########..................................................] \u001b8Unpacking x11proto-dev (2021.5-1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 16%]\u001b[49m\u001b[39m [#########.................................................] \u001b8Selecting previously unselected package libice-dev:amd64.\r\n",
      "Preparing to unpack .../07-libice-dev_2%3a1.0.10-1build2_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 18%]\u001b[49m\u001b[39m [##########................................................] \u001b8Unpacking libice-dev:amd64 (2:1.0.10-1build2) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 19%]\u001b[49m\u001b[39m [##########................................................] \u001b8Selecting previously unselected package libpthread-stubs0-dev:amd64.\r\n",
      "Preparing to unpack .../08-libpthread-stubs0-dev_0.4-1build2_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 20%]\u001b[49m\u001b[39m [###########...............................................] \u001b8Unpacking libpthread-stubs0-dev:amd64 (0.4-1build2) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 21%]\u001b[49m\u001b[39m [############..............................................] \u001b8Selecting previously unselected package librsvg2-common:amd64.\r\n",
      "Preparing to unpack .../09-librsvg2-common_2.52.5+dfsg-3ubuntu0.2_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 22%]\u001b[49m\u001b[39m [############..............................................] \u001b8Unpacking librsvg2-common:amd64 (2.52.5+dfsg-3ubuntu0.2) ...\r\n",
      "Selecting previously unselected package libsm-dev:amd64.\r\n",
      "Preparing to unpack .../10-libsm-dev_2%3a1.2.3-1build2_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 24%]\u001b[49m\u001b[39m [##############............................................] \u001b8Unpacking libsm-dev:amd64 (2:1.2.3-1build2) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 25%]\u001b[49m\u001b[39m [##############............................................] \u001b8Selecting previously unselected package libxau-dev:amd64.\r\n",
      "Preparing to unpack .../11-libxau-dev_1%3a1.0.9-1build5_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 26%]\u001b[49m\u001b[39m [###############...........................................] \u001b8Unpacking libxau-dev:amd64 (1:1.0.9-1build5) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 28%]\u001b[49m\u001b[39m [################..........................................] \u001b8Selecting previously unselected package libxdmcp-dev:amd64.\r\n",
      "Preparing to unpack .../12-libxdmcp-dev_1%3a1.1.3-0ubuntu5_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 29%]\u001b[49m\u001b[39m [################..........................................] \u001b8Unpacking libxdmcp-dev:amd64 (1:1.1.3-0ubuntu5) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 30%]\u001b[49m\u001b[39m [#################.........................................] \u001b8Selecting previously unselected package xtrans-dev.\r\n",
      "Preparing to unpack .../13-xtrans-dev_1.4.0-1_all.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 31%]\u001b[49m\u001b[39m [##################........................................] \u001b8Unpacking xtrans-dev (1.4.0-1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 32%]\u001b[49m\u001b[39m [##################........................................] \u001b8Selecting previously unselected package libxcb1-dev:amd64.\r\n",
      "Preparing to unpack .../14-libxcb1-dev_1.14-3ubuntu3_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 33%]\u001b[49m\u001b[39m [###################.......................................] \u001b8Unpacking libxcb1-dev:amd64 (1.14-3ubuntu3) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 34%]\u001b[49m\u001b[39m [###################.......................................] \u001b8Selecting previously unselected package libx11-dev:amd64.\r\n",
      "Preparing to unpack .../15-libx11-dev_2%3a1.7.5-1ubuntu0.3_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 36%]\u001b[49m\u001b[39m [####################......................................] \u001b8Unpacking libx11-dev:amd64 (2:1.7.5-1ubuntu0.3) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 37%]\u001b[49m\u001b[39m [#####################.....................................] \u001b8Selecting previously unselected package libxt-dev:amd64.\r\n",
      "Preparing to unpack .../16-libxt-dev_1%3a1.2.1-1_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 38%]\u001b[49m\u001b[39m [######################....................................] \u001b8Unpacking libxt-dev:amd64 (1:1.2.1-1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 39%]\u001b[49m\u001b[39m [######################....................................] \u001b8Selecting previously unselected package openjdk-8-jre-headless:amd64.\r\n",
      "Preparing to unpack .../17-openjdk-8-jre-headless_8u422-b05-1~22.04_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 40%]\u001b[49m\u001b[39m [#######################...................................] \u001b8Unpacking openjdk-8-jre-headless:amd64 (8u422-b05-1~22.04) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 41%]\u001b[49m\u001b[39m [########################..................................] \u001b8Selecting previously unselected package openjdk-8-jre:amd64.\r\n",
      "Preparing to unpack .../18-openjdk-8-jre_8u422-b05-1~22.04_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 43%]\u001b[49m\u001b[39m [########################..................................] \u001b8Unpacking openjdk-8-jre:amd64 (8u422-b05-1~22.04) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 44%]\u001b[49m\u001b[39m [#########################.................................] \u001b8Selecting previously unselected package openjdk-8-jdk-headless:amd64.\r\n",
      "Preparing to unpack .../19-openjdk-8-jdk-headless_8u422-b05-1~22.04_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 45%]\u001b[49m\u001b[39m [##########################................................] \u001b8Unpacking openjdk-8-jdk-headless:amd64 (8u422-b05-1~22.04) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 46%]\u001b[49m\u001b[39m [##########################................................] \u001b8Selecting previously unselected package openjdk-8-jdk:amd64.\r\n",
      "Preparing to unpack .../20-openjdk-8-jdk_8u422-b05-1~22.04_amd64.deb ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 47%]\u001b[49m\u001b[39m [###########################...............................] \u001b8Unpacking openjdk-8-jdk:amd64 (8u422-b05-1~22.04) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 48%]\u001b[49m\u001b[39m [############################..............................] \u001b8Setting up libpthread-stubs0-dev:amd64 (0.4-1build2) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 49%]\u001b[49m\u001b[39m [############################..............................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 51%]\u001b[49m\u001b[39m [#############################.............................] \u001b8Setting up xtrans-dev (1.4.0-1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 52%]\u001b[49m\u001b[39m [#############################.............................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 53%]\u001b[49m\u001b[39m [##############################............................] \u001b8Setting up openjdk-8-jre-headless:amd64 (8u422-b05-1~22.04) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 54%]\u001b[49m\u001b[39m [###############################...........................] \u001b8update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/orbd to provide /usr/bin/orbd (orbd) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/servertool to provide /usr/bin/servertool (servertool) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/tnameserv to provide /usr/bin/tnameserv (tnameserv) in auto mode\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 55%]\u001b[49m\u001b[39m [################################..........................] \u001b8Setting up librsvg2-common:amd64 (2.52.5+dfsg-3ubuntu0.2) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 56%]\u001b[49m\u001b[39m [################################..........................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 57%]\u001b[49m\u001b[39m [#################################.........................] \u001b8Setting up xorg-sgml-doctools (1:1.11-1.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 59%]\u001b[49m\u001b[39m [##################################........................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 60%]\u001b[49m\u001b[39m [##################################........................] \u001b8Setting up libgtk2.0-common (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 61%]\u001b[49m\u001b[39m [###################################.......................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 62%]\u001b[49m\u001b[39m [####################################......................] \u001b8Setting up x11proto-dev (2021.5-1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 63%]\u001b[49m\u001b[39m [####################################......................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 64%]\u001b[49m\u001b[39m [#####################################.....................] \u001b8Setting up libxau-dev:amd64 (1:1.0.9-1build5) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 66%]\u001b[49m\u001b[39m [######################################....................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 67%]\u001b[49m\u001b[39m [######################################....................] \u001b8Setting up libice-dev:amd64 (2:1.0.10-1build2) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 68%]\u001b[49m\u001b[39m [#######################################...................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 69%]\u001b[49m\u001b[39m [#######################################...................] \u001b8Setting up libsm-dev:amd64 (2:1.2.3-1build2) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 70%]\u001b[49m\u001b[39m [########################################..................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 71%]\u001b[49m\u001b[39m [#########################################.................] \u001b8Setting up libgtk2.0-0:amd64 (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 72%]\u001b[49m\u001b[39m [##########################################................] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 74%]\u001b[49m\u001b[39m [##########################################................] \u001b8Setting up openjdk-8-jre:amd64 (8u422-b05-1~22.04) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 75%]\u001b[49m\u001b[39m [###########################################...............] \u001b8update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/policytool to provide /usr/bin/policytool (policytool) in auto mode\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 76%]\u001b[49m\u001b[39m [############################################..............] \u001b8Setting up libxdmcp-dev:amd64 (1:1.1.3-0ubuntu5) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 77%]\u001b[49m\u001b[39m [############################################..............] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 78%]\u001b[49m\u001b[39m [#############################################.............] \u001b8Setting up openjdk-8-jdk-headless:amd64 (8u422-b05-1~22.04) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 79%]\u001b[49m\u001b[39m [##############################################............] \u001b8update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/clhsdb to provide /usr/bin/clhsdb (clhsdb) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/extcheck to provide /usr/bin/extcheck (extcheck) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/hsdb to provide /usr/bin/hsdb (hsdb) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/idlj to provide /usr/bin/idlj (idlj) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jar to provide /usr/bin/jar (jar) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jarsigner to provide /usr/bin/jarsigner (jarsigner) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javac to provide /usr/bin/javac (javac) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javadoc to provide /usr/bin/javadoc (javadoc) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javah to provide /usr/bin/javah (javah) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/javap to provide /usr/bin/javap (javap) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jcmd to provide /usr/bin/jcmd (jcmd) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jdb to provide /usr/bin/jdb (jdb) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jdeps to provide /usr/bin/jdeps (jdeps) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jfr to provide /usr/bin/jfr (jfr) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jhat to provide /usr/bin/jhat (jhat) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jinfo to provide /usr/bin/jinfo (jinfo) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jmap to provide /usr/bin/jmap (jmap) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jps to provide /usr/bin/jps (jps) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jrunscript to provide /usr/bin/jrunscript (jrunscript) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jsadebugd to provide /usr/bin/jsadebugd (jsadebugd) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jstack to provide /usr/bin/jstack (jstack) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jstat to provide /usr/bin/jstat (jstat) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jstatd to provide /usr/bin/jstatd (jstatd) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/native2ascii to provide /usr/bin/native2ascii (native2ascii) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/rmic to provide /usr/bin/rmic (rmic) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/schemagen to provide /usr/bin/schemagen (schemagen) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/serialver to provide /usr/bin/serialver (serialver) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsgen to provide /usr/bin/wsgen (wsgen) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/wsimport to provide /usr/bin/wsimport (wsimport) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/xjc to provide /usr/bin/xjc (xjc) in auto mode\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 80%]\u001b[49m\u001b[39m [##############################################............] \u001b8Setting up libgail18:amd64 (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 82%]\u001b[49m\u001b[39m [###############################################...........] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 83%]\u001b[49m\u001b[39m [################################################..........] \u001b8Setting up libgtk2.0-bin (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 84%]\u001b[49m\u001b[39m [################################################..........] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 85%]\u001b[49m\u001b[39m [#################################################.........] \u001b8Setting up openjdk-8-jdk:amd64 (8u422-b05-1~22.04) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 86%]\u001b[49m\u001b[39m [##################################################........] \u001b8update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/appletviewer to provide /usr/bin/appletviewer (appletviewer) in auto mode\r\n",
      "update-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/bin/jconsole to provide /usr/bin/jconsole (jconsole) in auto mode\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 87%]\u001b[49m\u001b[39m [##################################################........] \u001b8Setting up libxcb1-dev:amd64 (1.14-3ubuntu3) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 89%]\u001b[49m\u001b[39m [###################################################.......] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 90%]\u001b[49m\u001b[39m [####################################################......] \u001b8Setting up libgail-common:amd64 (2.24.33-2ubuntu2.1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 91%]\u001b[49m\u001b[39m [####################################################......] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 92%]\u001b[49m\u001b[39m [#####################################################.....] \u001b8Setting up libx11-dev:amd64 (2:1.7.5-1ubuntu0.3) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 93%]\u001b[49m\u001b[39m [#####################################################.....] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 94%]\u001b[49m\u001b[39m [######################################################....] \u001b8Setting up libxt-dev:amd64 (1:1.2.1-1) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 95%]\u001b[49m\u001b[39m [#######################################################...] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 97%]\u001b[49m\u001b[39m [########################################################..] \u001b8Processing triggers for hicolor-icon-theme (0.17-2) ...\r\n",
      "Processing triggers for libc-bin (2.35-0ubuntu3.8) ...\r\n",
      "Processing triggers for man-db (2.10.2-1) ...\r\n",
      "Processing triggers for libgdk-pixbuf-2.0-0:amd64 (2.42.8+dfsg-1ubuntu0.3) ...\r\n",
      "\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 98%]\u001b[49m\u001b[39m [########################################################..] \u001b8\u001b7\u001b[24;0f\u001b[42m\u001b[30mProgress: [ 99%]\u001b[49m\u001b[39m [#########################################################.] \u001b8\r\n",
      "\u001b7\u001b[0;24r\u001b8\u001b[1A\u001b[Jupdate-alternatives: using /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java to provide /usr/bin/java (java) in manual mode\r\n",
      "Collecting git+https://github.com/MCFreddie777/language-check.git\r\n",
      "  Cloning https://github.com/MCFreddie777/language-check.git to /tmp/pip-req-build-jkodmqv5\r\n",
      "  Running command git clone --filter=blob:none --quiet https://github.com/MCFreddie777/language-check.git /tmp/pip-req-build-jkodmqv5\r\n",
      "  Resolved https://github.com/MCFreddie777/language-check.git to commit 337493f25b5a49af0a09b0e264f306eccefaff8f\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hBuilding wheels for collected packages: language-check\r\n",
      "  Building wheel for language-check (setup.py) ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \bdone\r\n",
      "\u001b[?25h  Created wheel for language-check: filename=language_check-1.1-py3-none-any.whl size=90190985 sha256=9655560954a112d8d8ea1d1ad711949a0f1f2bcd2541702c6382d313ff5f0f51\r\n",
      "  Stored in directory: /tmp/pip-ephem-wheel-cache-igwkkw6p/wheels/d3/8b/b0/8f065f9ad75fb34b9be70a3cc1e2a24fec7a72d0c823c562d2\r\n",
      "Successfully built language-check\r\n",
      "Installing collected packages: language-check\r\n",
      "Successfully installed language-check-1.1\r\n",
      "Collecting POT\r\n",
      "  Downloading POT-0.9.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (32 kB)\r\n",
      "Requirement already satisfied: numpy>=1.16 in /opt/conda/lib/python3.10/site-packages (from POT) (1.26.4)\r\n",
      "Requirement already satisfied: scipy>=1.6 in /opt/conda/lib/python3.10/site-packages (from POT) (1.14.0)\r\n",
      "Downloading POT-0.9.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (835 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m835.4/835.4 kB\u001b[0m \u001b[31m18.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: POT\r\n",
      "Successfully installed POT-0.9.4\r\n",
      "Collecting contractions\r\n",
      "  Downloading contractions-0.1.73-py2.py3-none-any.whl.metadata (1.2 kB)\r\n",
      "Collecting textsearch>=0.0.21 (from contractions)\r\n",
      "  Downloading textsearch-0.0.24-py2.py3-none-any.whl.metadata (1.2 kB)\r\n",
      "Collecting anyascii (from textsearch>=0.0.21->contractions)\r\n",
      "  Downloading anyascii-0.3.2-py3-none-any.whl.metadata (1.5 kB)\r\n",
      "Collecting pyahocorasick (from textsearch>=0.0.21->contractions)\r\n",
      "  Downloading pyahocorasick-2.1.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl.metadata (13 kB)\r\n",
      "Downloading contractions-0.1.73-py2.py3-none-any.whl (8.7 kB)\r\n",
      "Downloading textsearch-0.0.24-py2.py3-none-any.whl (7.6 kB)\r\n",
      "Downloading anyascii-0.3.2-py3-none-any.whl (289 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m289.9/289.9 kB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading pyahocorasick-2.1.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (110 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m110.7/110.7 kB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: pyahocorasick, anyascii, textsearch, contractions\r\n",
      "Successfully installed anyascii-0.3.2 contractions-0.1.73 pyahocorasick-2.1.0 textsearch-0.0.24\r\n",
      "Collecting pycontractions\r\n",
      "  Downloading pycontractions-2.0.1-py3-none-any.whl.metadata (9.2 kB)\r\n",
      "Requirement already satisfied: gensim>=2.0 in /opt/conda/lib/python3.10/site-packages (from pycontractions) (4.3.3)\r\n",
      "Requirement already satisfied: language-check>=1.0 in /opt/conda/lib/python3.10/site-packages (from pycontractions) (1.1)\r\n",
      "Requirement already satisfied: pyemd>=0.4.4 in /opt/conda/lib/python3.10/site-packages (from pycontractions) (1.0.0)\r\n",
      "Requirement already satisfied: numpy<2.0,>=1.18.5 in /opt/conda/lib/python3.10/site-packages (from gensim>=2.0->pycontractions) (1.26.4)\r\n",
      "Collecting scipy<1.14.0,>=1.7.0 (from gensim>=2.0->pycontractions)\r\n",
      "  Downloading scipy-1.13.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.6/60.6 kB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hRequirement already satisfied: smart-open>=1.8.1 in /opt/conda/lib/python3.10/site-packages (from gensim>=2.0->pycontractions) (7.0.4)\r\n",
      "Requirement already satisfied: wrapt in /opt/conda/lib/python3.10/site-packages (from smart-open>=1.8.1->gensim>=2.0->pycontractions) (1.16.0)\r\n",
      "Downloading pycontractions-2.0.1-py3-none-any.whl (9.6 kB)\r\n",
      "Downloading scipy-1.13.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (38.6 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m38.6/38.6 MB\u001b[0m \u001b[31m42.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: scipy, pycontractions\r\n",
      "  Attempting uninstall: scipy\r\n",
      "    Found existing installation: scipy 1.14.0\r\n",
      "    Uninstalling scipy-1.14.0:\r\n",
      "      Successfully uninstalled scipy-1.14.0\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "cuml 24.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "libpysal 4.9.2 requires packaging>=22, but you have packaging 21.3 which is incompatible.\r\n",
      "libpysal 4.9.2 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "momepy 0.7.2 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "pointpats 2.5.0 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "spaghetti 1.7.6 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "spopt 0.6.1 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "tsfresh 0.20.3 requires scipy>=1.14.0; python_version >= \"3.10\", but you have scipy 1.13.1 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed pycontractions-2.0.1 scipy-1.13.1\r\n"
     ]
    }
   ],
   "source": [
    "# `language_check` dependency must be used with Java 8\n",
    "! sudo apt install openjdk-8-jdk -y\n",
    "! sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\n",
    "\n",
    "# Working version of `language_check`\n",
    "! pip install git+https://github.com/MCFreddie777/language-check.git\n",
    "\n",
    "! pip install POT # pycontractions dependency\n",
    "! pip install contractions # For counting contractions\n",
    "! pip install pycontractions # For expanding contractions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea718b56",
   "metadata": {
    "papermill": {
     "duration": 0.02104,
     "end_time": "2024-08-26T16:03:12.014018",
     "exception": false,
     "start_time": "2024-08-26T16:03:11.992978",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Processing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73fdcf66",
   "metadata": {
    "papermill": {
     "duration": 0.021154,
     "end_time": "2024-08-26T16:03:12.056675",
     "exception": false,
     "start_time": "2024-08-26T16:03:12.035521",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Dataset Retrieval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9cf27afc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:00.623066Z",
     "start_time": "2024-08-21T16:21:00.607729Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:12.101031Z",
     "iopub.status.busy": "2024-08-26T16:03:12.100613Z",
     "iopub.status.idle": "2024-08-26T16:03:12.999146Z",
     "shell.execute_reply": "2024-08-26T16:03:12.997964Z"
    },
    "papermill": {
     "duration": 0.923633,
     "end_time": "2024-08-26T16:03:13.001862",
     "exception": false,
     "start_time": "2024-08-26T16:03:12.078229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X shape: (2381, 2)\n",
      "X1 shape: (13181, 2)\n",
      "Concatenated dataframe shape: (15562, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6660</th>\n",
       "      <td>positive</td>\n",
       "      <td>WATCH: Lil Kesh – Shele Gan Gan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12057</th>\n",
       "      <td>positive</td>\n",
       "      <td>Gold soars past $1600/ounce after Iran attacks...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6831</th>\n",
       "      <td>negative</td>\n",
       "      <td>UK Children’s heart surgeons will use “hologra...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4165</th>\n",
       "      <td>positive</td>\n",
       "      <td>‘He’s not coherent’: Kevin Hart 911 call</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2983</th>\n",
       "      <td>negative</td>\n",
       "      <td>Airbnb in Australia: Entire homes commercial l...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      sentiment                                               text\n",
       "6660   positive                    WATCH: Lil Kesh – Shele Gan Gan\n",
       "12057  positive  Gold soars past $1600/ounce after Iran attacks...\n",
       "6831   negative  UK Children’s heart surgeons will use “hologra...\n",
       "4165   positive           ‘He’s not coherent’: Kevin Hart 911 call\n",
       "2983   negative  Airbnb in Australia: Entire homes commercial l..."
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from pandas import DataFrame\n",
    "\n",
    "dataset_path: str = \"/kaggle/input/news-sentiment-analysis-for-stock-data-by-company/djia_news copy.csv/djia_news copy.csv\"\n",
    "column_names: list[str] = [\"sentiment\", \"text\"]\n",
    "X: DataFrame = pd.read_csv(\n",
    "    dataset_path,\n",
    "    header=0,\n",
    "    names=column_names,\n",
    "    encoding=\"utf-8\",\n",
    "    encoding_errors=\"replace\",\n",
    "    usecols=[0, 2]\n",
    ")\n",
    "print(f\"X shape: {X.shape}\")\n",
    "    \n",
    "dataset_path: str = \"/kaggle/input/news-sentiment-analysis-for-stock-data-by-company/nasdaq.csv/nasdaq.csv\"\n",
    "X1: DataFrame = pd.read_csv(\n",
    "    dataset_path,\n",
    "    header=0,\n",
    "    names=column_names,\n",
    "    encoding=\"utf-8\",\n",
    "    encoding_errors=\"replace\",\n",
    "    usecols=[0, 2]\n",
    ")\n",
    "print(f\"X1 shape: {X1.shape}\")\n",
    "    \n",
    "# Concatenate dataframes\n",
    "X: DataFrame = pd.concat([X, X1])\n",
    "print(f\"Concatenated dataframe shape: {X.shape}\")\n",
    "\n",
    "# Map integers labels to string for data visualization\n",
    "X[\"sentiment\"] = X[\"sentiment\"].map({\n",
    "    0: \"negative\",\n",
    "    1: \"positive\",\n",
    "    2: \"neutral\"\n",
    "})\n",
    "\n",
    "# TODO: Remove links\n",
    "X.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9da998b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:13.066934Z",
     "iopub.status.busy": "2024-08-26T16:03:13.066024Z",
     "iopub.status.idle": "2024-08-26T16:03:13.119721Z",
     "shell.execute_reply": "2024-08-26T16:03:13.118602Z"
    },
    "papermill": {
     "duration": 0.088542,
     "end_time": "2024-08-26T16:03:13.122163",
     "exception": false,
     "start_time": "2024-08-26T16:03:13.033621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6109</th>\n",
       "      <td>negative</td>\n",
       "      <td>Where Do I Pay For A Flex Belt?</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1118</th>\n",
       "      <td>positive</td>\n",
       "      <td>Some of the world's most famous clothing brand...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6256</th>\n",
       "      <td>positive</td>\n",
       "      <td>200 egg farmers in Germany accused of selling ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8069</th>\n",
       "      <td>negative</td>\n",
       "      <td>Read Through The Austin Nightlife Talk With St...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13090</th>\n",
       "      <td>neutral</td>\n",
       "      <td>Zhou Youguang the creator of Pinyin (the syste...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      sentiment                                               text\n",
       "6109   negative                    Where Do I Pay For A Flex Belt?\n",
       "1118   positive  Some of the world's most famous clothing brand...\n",
       "6256   positive  200 egg farmers in Germany accused of selling ...\n",
       "8069   negative  Read Through The Austin Nightlife Talk With St...\n",
       "13090   neutral  Zhou Youguang the creator of Pinyin (the syste..."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_path: str = \"/kaggle/input/stockmarket-sentiment-dataset/stock_data.csv\"\n",
    "column_names: list[str] = [\"text\", \"sentiment\"]\n",
    "X1: DataFrame = pd.read_csv(\n",
    "    dataset_path,\n",
    "    header=0,\n",
    "    names=column_names,\n",
    "    encoding=\"utf-8\",\n",
    "    encoding_errors=\"replace\"\n",
    ")\n",
    "\n",
    "# Reorder columns\n",
    "X1: DataFrame = X1.reindex(columns=[\"sentiment\", \"text\"])\n",
    "X1.sample(5)\n",
    "\n",
    "# Map integers labels to string for data visualization\n",
    "X1[\"sentiment\"] = X1[\"sentiment\"].map({\n",
    "    -1: \"negative\",\n",
    "    1: \"positive\",\n",
    "})\n",
    "X1.sample(5)\n",
    "\n",
    "X: DataFrame = pd.concat([X, X1])\n",
    "X.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b277024e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:13.174823Z",
     "iopub.status.busy": "2024-08-26T16:03:13.174065Z",
     "iopub.status.idle": "2024-08-26T16:03:13.271803Z",
     "shell.execute_reply": "2024-08-26T16:03:13.270041Z"
    },
    "papermill": {
     "duration": 0.124982,
     "end_time": "2024-08-26T16:03:13.275921",
     "exception": false,
     "start_time": "2024-08-26T16:03:13.150939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X shape: (21353, 2)\n",
      "X1 shape: (11931, 2)\n",
      "Concatenated dataframe shape: (33284, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9104</th>\n",
       "      <td>negative</td>\n",
       "      <td>Theravance readies $150M stock offering; share...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2793</th>\n",
       "      <td>neutral</td>\n",
       "      <td>Hilton Worldwide Q4 2019 Earnings Preview</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8383</th>\n",
       "      <td>positive</td>\n",
       "      <td>Judge issues injunction against Uber and Lyft ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1993</th>\n",
       "      <td>positive</td>\n",
       "      <td>Hedge Funds Have Never Been This Bullish On Ha...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10747</th>\n",
       "      <td>positive</td>\n",
       "      <td>Bitstamp S'associe À Signature Bank</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      sentiment                                               text\n",
       "9104   negative  Theravance readies $150M stock offering; share...\n",
       "2793    neutral          Hilton Worldwide Q4 2019 Earnings Preview\n",
       "8383   positive  Judge issues injunction against Uber and Lyft ...\n",
       "1993   positive  Hedge Funds Have Never Been This Bullish On Ha...\n",
       "10747  positive                Bitstamp S'associe À Signature Bank"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_path: str = \"/kaggle/input/twitter-financial-news-sentiment-dataset/sent_train.csv\"\n",
    "column_names: list[str] = [\"text\", \"sentiment\"]\n",
    "X1: DataFrame = pd.read_csv(\n",
    "    dataset_path,\n",
    "    header=0,\n",
    "    names=column_names,\n",
    "    encoding=\"utf-8\",\n",
    "    encoding_errors=\"replace\"\n",
    ")\n",
    "    \n",
    "dataset_path: str = \"/kaggle/input/twitter-financial-news-sentiment-dataset/sent_valid.csv\"\n",
    "column_names: list[str] = [\"text\", \"sentiment\"]\n",
    "X2: DataFrame = pd.read_csv(\n",
    "    dataset_path,\n",
    "    header=0,\n",
    "    names=column_names,\n",
    "    encoding=\"utf-8\",\n",
    "    encoding_errors=\"replace\"\n",
    ")\n",
    "\n",
    "X1: DataFrame = pd.concat([X1, X2])\n",
    "X1.sample(5)\n",
    "\n",
    "# Reorder columns\n",
    "X1: DataFrame = X1.reindex(columns=[\"sentiment\", \"text\"])\n",
    "X1.sample(5)\n",
    "\n",
    "# Map integers labels to string for data visualization\n",
    "X1[\"sentiment\"] = X1[\"sentiment\"].map({\n",
    "    0: \"negative\",\n",
    "    1: \"positive\",\n",
    "    2: \"neutral\"\n",
    "})\n",
    "X1.sample(5)\n",
    "\n",
    "# Concatenate dataframes\n",
    "print(f\"X shape: {X.shape}\")\n",
    "print(f\"X1 shape: {X1.shape}\")\n",
    "\n",
    "X: DataFrame = pd.concat([X, X1])\n",
    "print(f\"Concatenated dataframe shape: {X.shape}\")\n",
    "\n",
    "\n",
    "X.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "64da14c8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:00.623066Z",
     "start_time": "2024-08-21T16:21:00.607729Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:13.331319Z",
     "iopub.status.busy": "2024-08-26T16:03:13.330312Z",
     "iopub.status.idle": "2024-08-26T16:03:13.374313Z",
     "shell.execute_reply": "2024-08-26T16:03:13.373195Z"
    },
    "papermill": {
     "duration": 0.06912,
     "end_time": "2024-08-26T16:03:13.376365",
     "exception": false,
     "start_time": "2024-08-26T16:03:13.307245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X shape: (33284, 2)\n",
      "X1 shape: (4846, 2)\n",
      "Concatenated dataframe shape: (38130, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5255</th>\n",
       "      <td>negative</td>\n",
       "      <td>Congress has offered to delay the implementati...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9529</th>\n",
       "      <td>negative</td>\n",
       "      <td>Full City Listing And Meeting Points For Inter...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>positive</td>\n",
       "      <td>GOOG with simple Fibonacci projections on clos...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>neutral</td>\n",
       "      <td>Will Second-Hand Sales Add Value to Nordstrom?</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1464</th>\n",
       "      <td>positive</td>\n",
       "      <td>£1bn haul of art treasures seized by Nazis fou...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     sentiment                                               text\n",
       "5255  negative  Congress has offered to delay the implementati...\n",
       "9529  negative  Full City Listing And Meeting Points For Inter...\n",
       "241   positive  GOOG with simple Fibonacci projections on clos...\n",
       "497    neutral     Will Second-Hand Sales Add Value to Nordstrom?\n",
       "1464  positive  £1bn haul of art treasures seized by Nazis fou..."
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_path: str = \"/kaggle/input/sentiment-analysis-for-financial-news/all-data.csv\"\n",
    "column_names: list[str] = [\"sentiment\", \"text\"]\n",
    "X1: DataFrame = pd.read_csv(\n",
    "    dataset_path,\n",
    "    names=column_names,\n",
    "    encoding=\"utf-8\",\n",
    "    encoding_errors=\"replace\"\n",
    ")\n",
    "print(f\"X shape: {X.shape}\")\n",
    "print(f\"X1 shape: {X1.shape}\")\n",
    "\n",
    "\n",
    "# Concatenate dataframes\n",
    "X: DataFrame = pd.concat([X, X1])\n",
    "print(f\"Concatenated dataframe shape: {X.shape}\")\n",
    "\n",
    "X.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b606d33c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:00.720417Z",
     "start_time": "2024-08-21T16:21:00.680857Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:13.423047Z",
     "iopub.status.busy": "2024-08-26T16:03:13.422721Z",
     "iopub.status.idle": "2024-08-26T16:03:13.688110Z",
     "shell.execute_reply": "2024-08-26T16:03:13.687096Z"
    },
    "papermill": {
     "duration": 0.291117,
     "end_time": "2024-08-26T16:03:13.690407",
     "exception": false,
     "start_time": "2024-08-26T16:03:13.399290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from pandas import Series\n",
    "\n",
    "label_counts: Series = X[\"sentiment\"].value_counts()\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.pie(label_counts, labels=label_counts.index, autopct='%1.1f%%')\n",
    "plt.title('Sentiments distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8beac950",
   "metadata": {
    "papermill": {
     "duration": 0.022776,
     "end_time": "2024-08-26T16:03:13.736112",
     "exception": false,
     "start_time": "2024-08-26T16:03:13.713336",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "79374a2b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:00.810216Z",
     "start_time": "2024-08-21T16:21:00.760091Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:13.783418Z",
     "iopub.status.busy": "2024-08-26T16:03:13.783093Z",
     "iopub.status.idle": "2024-08-26T16:03:13.977551Z",
     "shell.execute_reply": "2024-08-26T16:03:13.976479Z"
    },
    "papermill": {
     "duration": 0.221755,
     "end_time": "2024-08-26T16:03:13.980987",
     "exception": false,
     "start_time": "2024-08-26T16:03:13.759232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Balance dataframe so that each sentiment has the same number of elements\n",
    "min_label_count: int = label_counts.values[-1]\n",
    "negative_sample: DataFrame = X[X[\"sentiment\"] == \"negative\"].sample(min_label_count)\n",
    "neutral_sample: DataFrame = X[X[\"sentiment\"] == \"neutral\"].sample(min_label_count)\n",
    "positive_sample: DataFrame = X[X[\"sentiment\"] == \"positive\"].sample(min_label_count)\n",
    "X: DataFrame = pd.concat([negative_sample, neutral_sample, positive_sample])\n",
    "\n",
    "# Visualize sentiment distribution after balancing\n",
    "label_counts: Series = X[\"sentiment\"].value_counts()\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.pie(label_counts, labels=label_counts.index, autopct='%1.1f%%')\n",
    "plt.title('Sentiment distribution after balancing')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "331b36b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:14.051231Z",
     "iopub.status.busy": "2024-08-26T16:03:14.050206Z",
     "iopub.status.idle": "2024-08-26T16:03:14.072606Z",
     "shell.execute_reply": "2024-08-26T16:03:14.071719Z"
    },
    "papermill": {
     "duration": 0.049578,
     "end_time": "2024-08-26T16:03:14.075083",
     "exception": false,
     "start_time": "2024-08-26T16:03:14.025505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "608     Market Overview: Telecom Cyber Security Soluti...\n",
       "1205    IBM and MS deciding New Zealand legislation: I...\n",
       "7195    garmin nuvi GPS review update sale cheap and b...\n",
       "6107    Customized Harley Davidson Motorcycles by Flex...\n",
       "1796    S&amp;P shocks Poland with credit rating downg...\n",
       "                              ...                        \n",
       "8645    Schools warn parents sick Momo 'suicide game' ...\n",
       "3852    Talking headsCNBC talking the GOOG~ AAP rotati...\n",
       "5608    Gold holds gain after WHO chief's 'tip of the ...\n",
       "7381    Hasbro Star Wars The Classic Assortment Boba F...\n",
       "232     Eastman Chemical stock price target raised to ...\n",
       "Name: text, Length: 32862, dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove leading and trailing whitespaces and newlines characters\n",
    "X[\"text\"].str.strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e01f94c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:14.127984Z",
     "iopub.status.busy": "2024-08-26T16:03:14.127589Z",
     "iopub.status.idle": "2024-08-26T16:03:14.309224Z",
     "shell.execute_reply": "2024-08-26T16:03:14.308327Z"
    },
    "papermill": {
     "duration": 0.208548,
     "end_time": "2024-08-26T16:03:14.311105",
     "exception": false,
     "start_time": "2024-08-26T16:03:14.102557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of URLs present in the dataset: 6802\n",
      "Cleaning...\n",
      "Remaining URLs: 0\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "from pandas import Index\n",
    "\n",
    "# Remove all URLs\n",
    "regex: str = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'\n",
    "urls: list[list[str]] = [re.findall(regex, x) for x in X.text]\n",
    "urls: list[str] = [x for x1 in urls for x in x1 if x]\n",
    "print(f\"Number of URLs present in the dataset: {len(urls)}\")\n",
    "\n",
    "print(\"Cleaning...\")\n",
    "X.text.replace(inplace=True, regex=regex, value=\"\")\n",
    "    \n",
    "urls: list[list[str]] = [re.findall(regex, x) for x in X.text]\n",
    "urls: list[str] = [x for x1 in urls for x in x1 if x]\n",
    "print(f\"Remaining URLs: {len(urls)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e2c83969",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:14.359308Z",
     "iopub.status.busy": "2024-08-26T16:03:14.359003Z",
     "iopub.status.idle": "2024-08-26T16:03:14.363148Z",
     "shell.execute_reply": "2024-08-26T16:03:14.362194Z"
    },
    "papermill": {
     "duration": 0.030395,
     "end_time": "2024-08-26T16:03:14.365161",
     "exception": false,
     "start_time": "2024-08-26T16:03:14.334766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Translate text to english"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97ce6a95",
   "metadata": {
    "papermill": {
     "duration": 0.02283,
     "end_time": "2024-08-26T16:03:14.411339",
     "exception": false,
     "start_time": "2024-08-26T16:03:14.388509",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Expand Contractions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8183ea49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:03:14.459736Z",
     "iopub.status.busy": "2024-08-26T16:03:14.459036Z",
     "iopub.status.idle": "2024-08-26T16:04:31.090408Z",
     "shell.execute_reply": "2024-08-26T16:04:31.089523Z"
    },
    "papermill": {
     "duration": 76.658225,
     "end_time": "2024-08-26T16:04:31.093132",
     "exception": false,
     "start_time": "2024-08-26T16:03:14.434907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from pycontractions import Contractions\n",
    "\n",
    "path_to_model: str = \"/kaggle/input/googlenewsvectors/GoogleNews-vectors-negative300.bin\"\n",
    "\n",
    "# Contractions object initialization takes a bit of time...  \n",
    "contractions: Contractions = Contractions(path_to_model)\n",
    "contractions.load_models()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bb08e5b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:04:31.147653Z",
     "iopub.status.busy": "2024-08-26T16:04:31.147244Z",
     "iopub.status.idle": "2024-08-26T16:05:26.145416Z",
     "shell.execute_reply": "2024-08-26T16:05:26.144495Z"
    },
    "papermill": {
     "duration": 55.05294,
     "end_time": "2024-08-26T16:05:26.171094",
     "exception": false,
     "start_time": "2024-08-26T16:04:31.118154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expanding contractions...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2165</th>\n",
       "      <td>negative</td>\n",
       "      <td>The U.N. health agency said Wednesday it has s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10045</th>\n",
       "      <td>positive</td>\n",
       "      <td>A Russian military ammo depot that blew up ear...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3139</th>\n",
       "      <td>neutral</td>\n",
       "      <td>News Highlights : Top Energy News of the Day #...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5242</th>\n",
       "      <td>neutral</td>\n",
       "      <td>Sperm whale carcass for sale on eBay by Newfou...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2272</th>\n",
       "      <td>positive</td>\n",
       "      <td>CEO of the company Tarmo Noop said the growth ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      sentiment                                               text\n",
       "2165   negative  The U.N. health agency said Wednesday it has s...\n",
       "10045  positive  A Russian military ammo depot that blew up ear...\n",
       "3139    neutral  News Highlights : Top Energy News of the Day #...\n",
       "5242    neutral  Sperm whale carcass for sale on eBay by Newfou...\n",
       "2272   positive  CEO of the company Tarmo Noop said the growth ..."
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import contractions as contractions_counter\n",
    "\n",
    "# Contractions expansion takes time too...\n",
    "print(\"Expanding contractions...\")\n",
    "X.text = X.text.apply(lambda x: list(contractions.expand_texts([x], precise=True))[0])\n",
    "\n",
    "X.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b3717190",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:05:26.219741Z",
     "iopub.status.busy": "2024-08-26T16:05:26.219045Z",
     "iopub.status.idle": "2024-08-26T16:05:26.391904Z",
     "shell.execute_reply": "2024-08-26T16:05:26.391163Z"
    },
    "papermill": {
     "duration": 0.199321,
     "end_time": "2024-08-26T16:05:26.394040",
     "exception": false,
     "start_time": "2024-08-26T16:05:26.194719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Make final dataset downloadable\n",
    "path: str = \"/kaggle/working/dataset.csv\"\n",
    "X.to_csv(path, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7f537402",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-26T16:05:26.442728Z",
     "iopub.status.busy": "2024-08-26T16:05:26.442088Z",
     "iopub.status.idle": "2024-08-26T16:05:26.454505Z",
     "shell.execute_reply": "2024-08-26T16:05:26.453625Z"
    },
    "papermill": {
     "duration": 0.038662,
     "end_time": "2024-08-26T16:05:26.456393",
     "exception": false,
     "start_time": "2024-08-26T16:05:26.417731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "560     1\n",
       "1207    1\n",
       "380     2\n",
       "3056    0\n",
       "1424    1\n",
       "Name: sentiment, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode labels from string to integer\n",
    "X[\"sentiment\"] = X[\"sentiment\"].map({\n",
    "    'negative': 0,\n",
    "    'neutral' : 1,\n",
    "    'positive': 2\n",
    "})\n",
    "\n",
    "# Extract labels\n",
    "Y: Series = X.pop(\"sentiment\")\n",
    "\n",
    "Y.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5c9347e4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:00.830232Z",
     "start_time": "2024-08-21T16:21:00.819469Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:05:26.506372Z",
     "iopub.status.busy": "2024-08-26T16:05:26.505527Z",
     "iopub.status.idle": "2024-08-26T16:05:26.646584Z",
     "shell.execute_reply": "2024-08-26T16:05:26.645314Z"
    },
    "papermill": {
     "duration": 0.168229,
     "end_time": "2024-08-26T16:05:26.648606",
     "exception": false,
     "start_time": "2024-08-26T16:05:26.480377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vocabulary size: 68354\n"
     ]
    }
   ],
   "source": [
    "# Get the number of unique words in all the texts\n",
    "def get_vocab_size(strings: Series) -> int:\n",
    "    unique_words: set[str] = set()\n",
    "    for string in strings:\n",
    "        for word in string.split():\n",
    "            unique_words.add(word)\n",
    "    return len(unique_words)\n",
    "\n",
    "\n",
    "vocab_size: int = get_vocab_size(X.squeeze())\n",
    "print(f\"Vocabulary size: {vocab_size}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5fcad001",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:00.956436Z",
     "start_time": "2024-08-21T16:21:00.951685Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:05:26.698147Z",
     "iopub.status.busy": "2024-08-26T16:05:26.697433Z",
     "iopub.status.idle": "2024-08-26T16:05:26.708309Z",
     "shell.execute_reply": "2024-08-26T16:05:26.707305Z"
    },
    "papermill": {
     "duration": 0.037517,
     "end_time": "2024-08-26T16:05:26.710166",
     "exception": false,
     "start_time": "2024-08-26T16:05:26.672649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train length: 24646\n",
      "Y_train length: 24646\n",
      "X_val length: 8216\n",
      "Y_val length: 8216\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_val, Y_train, Y_val = train_test_split(\n",
    "    X,\n",
    "    Y,\n",
    "    test_size=0.25\n",
    ")\n",
    "\n",
    "print(f\"X_train length: {len(X_train)}\")\n",
    "print(f\"Y_train length: {len(Y_train)}\")\n",
    "print(f\"X_val length: {len(X_val)}\")\n",
    "print(f\"Y_val length: {len(Y_val)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bc3acad",
   "metadata": {
    "papermill": {
     "duration": 0.023517,
     "end_time": "2024-08-26T16:05:26.757763",
     "exception": false,
     "start_time": "2024-08-26T16:05:26.734246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Building"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b73b42d7",
   "metadata": {
    "papermill": {
     "duration": 0.024505,
     "end_time": "2024-08-26T16:05:26.805942",
     "exception": false,
     "start_time": "2024-08-26T16:05:26.781437",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Neural Network Definition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5f445b56",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:01.092371Z",
     "start_time": "2024-08-21T16:21:01.071628Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:05:26.854773Z",
     "iopub.status.busy": "2024-08-26T16:05:26.854433Z",
     "iopub.status.idle": "2024-08-26T16:05:27.727107Z",
     "shell.execute_reply": "2024-08-26T16:05:27.726076Z"
    },
    "papermill": {
     "duration": 0.89978,
     "end_time": "2024-08-26T16:05:27.729590",
     "exception": false,
     "start_time": "2024-08-26T16:05:26.829810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"KERAS_BACKEND\"] = \"tensorflow\"\n",
    "import keras\n",
    "\n",
    "sequence_length = 64\n",
    "\n",
    "vectorize_layer = keras.layers.TextVectorization(\n",
    "    max_tokens=vocab_size,\n",
    "    output_mode=\"int\",\n",
    "    output_sequence_length=sequence_length,\n",
    "    name=\"text-vectorization\"\n",
    ")\n",
    "\n",
    "vectorize_layer.adapt(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "00a3dd83",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:01.144832Z",
     "start_time": "2024-08-21T16:21:01.110685Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:05:27.779681Z",
     "iopub.status.busy": "2024-08-26T16:05:27.779129Z",
     "iopub.status.idle": "2024-08-26T16:05:27.870583Z",
     "shell.execute_reply": "2024-08-26T16:05:27.869727Z"
    },
    "papermill": {
     "duration": 0.118381,
     "end_time": "2024-08-26T16:05:27.872479",
     "exception": false,
     "start_time": "2024-08-26T16:05:27.754098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"finance-news-sentiments-classifier\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"finance-news-sentiments-classifier\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ text-vectorization              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TextVectorization</span>)             │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">8,749,312</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout-1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv-1d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv1D</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">20</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">41,024</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global-max-pooling-1d           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalMaxPooling1D</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout-2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ output (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">99</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ text-vectorization              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mTextVectorization\u001b[0m)             │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m128\u001b[0m)        │     \u001b[38;5;34m8,749,312\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout-1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m128\u001b[0m)        │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv-1d (\u001b[38;5;33mConv1D\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m20\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │        \u001b[38;5;34m41,024\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ global-max-pooling-1d           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "│ (\u001b[38;5;33mGlobalMaxPooling1D\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout-2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ output (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)              │            \u001b[38;5;34m99\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,792,515</span> (33.54 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m8,792,515\u001b[0m (33.54 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,792,515</span> (33.54 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m8,792,515\u001b[0m (33.54 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from keras import Sequential\n",
    "from keras.src.layers import Conv1D, Dense, Dropout, Embedding, InputLayer, GlobalMaxPooling1D\n",
    "\n",
    "embedding_dim = 128\n",
    "\n",
    "model = Sequential([\n",
    "    InputLayer((1,), dtype=tf.string),\n",
    "    vectorize_layer,\n",
    "    Embedding(vocab_size, embedding_dim, name=\"embedding\"),\n",
    "    Dropout(0.2, name=\"dropout-1\"),\n",
    "    Conv1D(64, 5, padding=\"valid\", activation=\"relu\", strides=3, name=\"conv-1d\"),\n",
    "    GlobalMaxPooling1D(name=\"global-max-pooling-1d\"),\n",
    "    Dense(32, activation=\"relu\", name=\"dense\"),\n",
    "    Dropout(0.2, name=\"dropout-2\"),\n",
    "    Dense(3, activation=\"softmax\", name=\"output\")\n",
    "], name=\"finance-news-sentiments-classifier\")\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1718729",
   "metadata": {
    "papermill": {
     "duration": 0.024222,
     "end_time": "2024-08-26T16:05:27.921379",
     "exception": false,
     "start_time": "2024-08-26T16:05:27.897157",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Fitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "717ebed2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:14.834013Z",
     "start_time": "2024-08-21T16:21:01.162066Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:05:27.972785Z",
     "iopub.status.busy": "2024-08-26T16:05:27.972456Z",
     "iopub.status.idle": "2024-08-26T16:06:27.558098Z",
     "shell.execute_reply": "2024-08-26T16:06:27.557260Z"
    },
    "papermill": {
     "duration": 59.613264,
     "end_time": "2024-08-26T16:06:27.560139",
     "exception": false,
     "start_time": "2024-08-26T16:05:27.946875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 7ms/step - loss: 0.9982 - sparse_categorical_accuracy: 0.4660 - val_loss: 0.7429 - val_sparse_categorical_accuracy: 0.6693\n",
      "Epoch 2/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - loss: 0.4944 - sparse_categorical_accuracy: 0.8063 - val_loss: 0.7422 - val_sparse_categorical_accuracy: 0.6817\n",
      "Epoch 3/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - loss: 0.1959 - sparse_categorical_accuracy: 0.9359 - val_loss: 0.9133 - val_sparse_categorical_accuracy: 0.6803\n",
      "Epoch 4/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 7ms/step - loss: 0.1007 - sparse_categorical_accuracy: 0.9707 - val_loss: 1.0536 - val_sparse_categorical_accuracy: 0.6734\n",
      "Epoch 5/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - loss: 0.0673 - sparse_categorical_accuracy: 0.9797 - val_loss: 1.1545 - val_sparse_categorical_accuracy: 0.6705\n",
      "Epoch 6/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - loss: 0.0483 - sparse_categorical_accuracy: 0.9835 - val_loss: 1.3279 - val_sparse_categorical_accuracy: 0.6762\n",
      "Epoch 7/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - loss: 0.0370 - sparse_categorical_accuracy: 0.9861 - val_loss: 1.5165 - val_sparse_categorical_accuracy: 0.6706\n",
      "Epoch 8/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - loss: 0.0328 - sparse_categorical_accuracy: 0.9827 - val_loss: 1.7307 - val_sparse_categorical_accuracy: 0.6671\n",
      "Epoch 9/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 7ms/step - loss: 0.0313 - sparse_categorical_accuracy: 0.9833 - val_loss: 1.9748 - val_sparse_categorical_accuracy: 0.6655\n",
      "Epoch 10/10\n",
      "\u001b[1m771/771\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - loss: 0.0318 - sparse_categorical_accuracy: 0.9825 - val_loss: 1.8546 - val_sparse_categorical_accuracy: 0.6618\n"
     ]
    }
   ],
   "source": [
    "from keras.src.callbacks import History, EarlyStopping\n",
    "\n",
    "epochs = 10\n",
    "\n",
    "model.compile(\n",
    "    loss=\"sparse_categorical_crossentropy\",\n",
    "    metrics=[\"sparse_categorical_accuracy\"],\n",
    "    optimizer=\"adam\",\n",
    ")\n",
    "\n",
    "early_stoping_callback: EarlyStopping = EarlyStopping(\n",
    ")\n",
    "\n",
    "history: History = model.fit(\n",
    "    X_train,\n",
    "    Y_train,\n",
    "    validation_data=(X_val, Y_val),\n",
    "    epochs=epochs\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fcbfa524",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-21T16:21:15.030969Z",
     "start_time": "2024-08-21T16:21:14.848748Z"
    },
    "execution": {
     "iopub.execute_input": "2024-08-26T16:06:27.796926Z",
     "iopub.status.busy": "2024-08-26T16:06:27.796516Z",
     "iopub.status.idle": "2024-08-26T16:06:28.205882Z",
     "shell.execute_reply": "2024-08-26T16:06:28.204998Z"
    },
    "papermill": {
     "duration": 0.548603,
     "end_time": "2024-08-26T16:06:28.207920",
     "exception": false,
     "start_time": "2024-08-26T16:06:27.659317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkAAAAHHCAYAAABXx+fLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABlkklEQVR4nO3dd3gU5d7G8e9m04EkhIQUCOUA0oTQIWBDo6GIYKPpoajwHjtGVFAB2zGggoggCFJEpagUFQSBCHhAehFQEEE6SegJKaTtvn8MLKy0AEkmyd6f65qTzDPPzP6GHMzNzDPzWOx2ux0RERERF+JmdgEiIiIihU0BSERERFyOApCIiIi4HAUgERERcTkKQCIiIuJyFIBERETE5SgAiYiIiMtRABIRERGXowAkIiIiLkcBSESKPYvFwhtvvHHN++3duxeLxcKUKVOu2G/ZsmVYLBaWLVt2XfWJSNGjACQi+WLKlClYLBYsFgsrVqy4aLvdbiciIgKLxcK9995rQoUiIucpAIlIvvL29mbatGkXtS9fvpyDBw/i5eVlQlUiIs4UgEQkX7Vr145vvvmGnJwcp/Zp06bRuHFjQkNDTapMROQ8BSARyVfdunXj+PHjLF682NGWlZXFt99+S/fu3S+5T1paGi+++CIRERF4eXlRs2ZNPvjgA+x2u1O/zMxMXnjhBYKDgylTpgz33XcfBw8evOQxDx06xGOPPUZISAheXl7UrVuXSZMm5d+JAt988w2NGzfGx8eHoKAgHn30UQ4dOuTUJzExkd69e1OxYkW8vLwICwujY8eO7N2719Fn/fr1xMTEEBQUhI+PD1WrVuWxxx7L11pFxJm72QWISMlSpUoVoqKimD59Om3btgVgwYIFJCcn07VrV0aNGuXU3263c99997F06VIef/xxGjRowE8//cRLL73EoUOH+PDDDx19n3jiCb788ku6d+9Oy5Yt+fnnn2nfvv1FNSQlJdGiRQssFgvPPPMMwcHBLFiwgMcff5yUlBT69et3w+c5ZcoUevfuTdOmTYmLiyMpKYmPPvqIlStXsmnTJgICAgB48MEH+f3333n22WepUqUKR44cYfHixezfv9+xfs899xAcHMyAAQMICAhg7969zJ49+4ZrFJErsIuI5IPJkyfbAfu6devso0ePtpcpU8aenp5ut9vt9ocfftjeunVru91ut1euXNnevn17x35z5861A/Z33nnH6XgPPfSQ3WKx2Hft2mW32+32zZs32wH7U0895dSve/fudsA+ZMgQR9vjjz9uDwsLsx87dsypb9euXe3+/v6Ouvbs2WMH7JMnT77iuS1dutQO2JcuXWq32+32rKwse/ny5e0333yzPSMjw9Fv3rx5dsA+ePBgu91ut588edIO2N9///3LHnvOnDmOPzcRKTy6BSYi+a5z585kZGQwb948Tp8+zbx58y57++vHH3/EarXy3HPPObW/+OKL2O12FixY4OgHXNTvn1dz7HY7s2bNokOHDtjtdo4dO+ZYYmJiSE5OZuPGjTd0fuvXr+fIkSM89dRTeHt7O9rbt29PrVq1mD9/PgA+Pj54enqybNkyTp48ecljnbtSNG/ePLKzs2+oLhHJOwUgEcl3wcHBREdHM23aNGbPnk1ubi4PPfTQJfvu27eP8PBwypQp49Reu3Ztx/ZzX93c3KhWrZpTv5o1azqtHz16lFOnTjF+/HiCg4Odlt69ewNw5MiRGzq/czX987MBatWq5dju5eXFsGHDWLBgASEhIdx222289957JCYmOvrffvvtPPjgg7z55psEBQXRsWNHJk+eTGZm5g3VKCJXpjFAIlIgunfvTp8+fUhMTKRt27aOKx0FzWazAfDoo4/Ss2fPS/apX79+odQCxhWqDh06MHfuXH766ScGDRpEXFwcP//8Mw0bNsRisfDtt9+yevVqfvjhB3766Scee+wxhg8fzurVqyldunSh1SriSnQFSEQKxP3334+bmxurV6++7O0vgMqVK3P48GFOnz7t1L5jxw7H9nNfbTYbu3fvdur3559/Oq2fe0IsNzeX6OjoSy7ly5e/oXM7V9M/P/tc27nt51SrVo0XX3yRRYsWsW3bNrKyshg+fLhTnxYtWvDf//6X9evX89VXX/H7778zY8aMG6pTRC5PAUhECkTp0qUZO3Ysb7zxBh06dLhsv3bt2pGbm8vo0aOd2j/88EMsFovjSbJzX//5FNnIkSOd1q1WKw8++CCzZs1i27ZtF33e0aNHr+d0nDRp0oTy5cszbtw4p1tVCxYsYPv27Y4n09LT0zlz5ozTvtWqVaNMmTKO/U6ePHnR4/4NGjQA0G0wkQKkW2AiUmAudwvqQh06dKB169a89tpr7N27l8jISBYtWsR3331Hv379HGN+GjRo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2tzc3IiOjmbVqlUmViYAycnJAAQGBppciWt7+umnad++vdPfEzHH999/T5MmTXj44YcpX748DRs2ZMKECWaX5bJatmxJfHw8O3fuBOC3335jxYoVtG3b1uTKijdNhloIjh07Rm5uLiEhIU7tISEh7Nixw6SqBIwrcf369aNVq1bcfPPNZpfjsmbMmMHGjRtZt26d2aUI8PfffzN27FhiY2N59dVXWbduHc899xyenp707NnT7PJczoABA0hJSaFWrVpYrVZyc3P573//yyOPPGJ2acWaApC4tKeffppt27axYsUKs0txWQcOHOD5559n8eLFeHt7m12OYPzDoEmTJrz77rsANGzYkG3btjFu3DgFIBN8/fXXfPXVV0ybNo26deuyefNm+vXrR3h4uH4eN0ABqBAEBQVhtVpJSkpyak9KSiI0NNSkquSZZ55h3rx5/PLLL1SsWNHsclzWhg0bOHLkCI0aNXK05ebm8ssvvzB69GgyMzOxWq0mVuh6wsLCqFOnjlNb7dq1mTVrlkkVubaXXnqJAQMG0LVrVwDq1avHvn37iIuLUwC6ARoDVAg8PT1p3Lgx8fHxjjabzUZ8fDxRUVEmVuaa7HY7zzzzDHPmzOHnn3+matWqZpfk0u666y62bt3K5s2bHUuTJk145JFH2Lx5s8KPCVq1anXRqyF27txJ5cqVTarItaWnp+Pm5vzr2mq1YrPZTKqoZNAVoEISGxtLz549adKkCc2aNWPkyJGkpaXRu3dvs0tzOU8//TTTpk3ju+++o0yZMiQmJgLg7++Pj4+PydW5njJlylw0/qpUqVKUK1dO47JM8sILL9CyZUveffddOnfuzNq1axk/fjzjx483uzSX1KFDB/773/9SqVIl6taty6ZNmxgxYgSPPfaY2aUVa3oMvhCNHj2a999/n8TERBo0aMCoUaNo3ry52WW5HIvFcsn2yZMn06tXr8ItRi7pjjvu0GPwJps3bx4DBw7kr7/+omrVqsTGxtKnTx+zy3JJp0+fZtCgQcyZM4cjR44QHh5Ot27dGDx4MJ6enmaXV2wpAImIiIjL0RggERERcTkKQCIiIuJyFIBERETE5SgAiYiIiMtRABIRERGXowAkIiIiLkcBSERERFyOApCISB4sW7YMi8XCqVOnzC5FRPKBApCIiIi4HAUgERERcTkKQCJSLNhsNuLi4qhatSo+Pj5ERkby7bffAudvT82fP5/69evj7e1NixYt2LZtm9MxZs2aRd26dfHy8qJKlSoMHz7caXtmZiavvPIKEREReHl5Ub16dSZOnOjUZ8OGDTRp0gRfX19atmx50azpIlI8KACJSLEQFxfH1KlTGTduHL///jsvvPACjz76KMuXL3f0eemllxg+fDjr1q0jODiYDh06kJ2dDRjBpXPnznTt2pWtW7fyxhtvMGjQIKZMmeLYv0ePHkyfPp1Ro0axfft2Pv30U0qXLu1Ux2uvvcbw4cNZv3497u7umpFbpJjSZKgiUuRlZmYSGBjIkiVLiIqKcrQ/8cQTpKen07dvX1q3bs2MGTPo0qULACdOnKBixYpMmTKFzp0788gjj3D06FEWLVrk2P/ll19m/vz5/P777+zcuZOaNWuyePFioqOjL6ph2bJltG7dmiVLlnDXXXcB8OOPP9K+fXsyMjLw9vYu4D8FEclPugIkIkXerl27SE9P5+6776Z06dKOZerUqezevdvR78JwFBgYSM2aNdm+fTsA27dvp1WrVk7HbdWqFX/99Re5ubls3rwZq9XK7bfffsVa6tev7/g+LCwMgCNHjtzwOYpI4XI3uwARkatJTU0FYP78+VSoUMFpm5eXl1MIul4+Pj556ufh4eH43mKxAMb4JBEpXnQFSESKvDp16uDl5cX+/fupXr260xIREeHot3r1asf3J0+eZOfOndSuXRuA2rVrs3LlSqfjrly5kptuugmr1Uq9evWw2WxOY4pEpOTSFSARKfLKlClD//79eeGFF7DZbNxyyy0kJyezcuVK/Pz8qFy5MgBvvfUW5cqVIyQkhNdee42goCA6deoEwIsvvkjTpk15++236dKlC6tWrWL06NF88sknAFSpUoWePXvy2GOPMWrUKCIjI9m3bx9Hjhyhc+fOZp26iBQQBSARKRbefvttgoODiYuL4++//yYgIIBGjRrx6quvOm5BDR06lOeff56//vqLBg0a8MMPP+Dp6QlAo0aN+Prrrxk8eDBvv/02YWFhvPXWW/Tq1cvxGWPHjuXVV1/lqaee4vjx41SqVIlXX33VjNMVkQKmp8BEpNg794TWyZMnCQgIMLscESkGNAZIREREXI4CkIiIiLgc3QITERERl6MrQCIiIuJyFIBERETE5SgAiYiIiMtRABIRERGXowAkIiIiLkcBSERERFyOApCIiIi4HAUgERERcTkKQCIiIuJy/h/sM8aLYIh0ogAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['sparse_categorical_accuracy'])\n",
    "plt.plot(history.history['val_sparse_categorical_accuracy'])\n",
    "plt.title('Model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['training', 'validation'], loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['training', 'validation'], loc='upper left')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 622510,
     "sourceId": 1192499,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 695933,
     "sourceId": 1217821,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1213651,
     "sourceId": 2033178,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1391881,
     "sourceId": 2307650,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5244554,
     "sourceId": 8736385,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 295.204173,
   "end_time": "2024-08-26T16:06:31.227574",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-26T16:01:36.023401",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
